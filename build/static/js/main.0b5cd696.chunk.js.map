{"version":3,"sources":["logo.svg","User/UserRestaurantView.js","User/UserView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","UserRestaurantView","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","restaurants","setState","catch","err","error","react_default","a","createElement","className","UserRestaurantView_UserMenu","open","user","React","Component","UserMenu","props","_this3","UserView","UserView_UserMenu","src_User_UserRestaurantView","App","src","logo","alt","href","target","rel","src_User_UserView","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b5cd696.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './../logo.svg';\nimport './UserRestaurantView.css';\n\nclass UserRestaurantView extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {};\n    }\n\n    componentDidMount() {\n        fetch(\"/restaurants\").then(restaurants => {\n            this.setState({\n                restaurants: restaurants\n            })\n        }).catch(err => {\n            this.setState({\n                error: true\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"UserView\">\n                <UserMenu open={false}></UserMenu>\n                <UserRestaurantView user={this.state.user}></UserRestaurantView>\n            </div>\n        );\n    }\n}\n\nclass UserMenu extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {\n            open: props.open\n        };\n    }\n\n    render() {\n        return <div className=\"UserMenu\"></div>\n    }\n}\n\nexport default UserRestaurantView;\n","import React from 'react';\nimport logo from './../logo.svg';\nimport './UserView.css';\nimport UserRestaurantView from \"./UserRestaurantView\";\n\nclass UserView extends React.Component {\n    constructor() {\n        super();\n        this.state = {};\n    }\n\n    componentDidMount() {\n        fetch(\"/user\").then(user => {\n            if(!user.error) {\n                this.setState({\n                    user: user\n                });\n            } else {\n                this.setState({\n                    error: true\n                });\n            }\n        }).catch(err => {\n            this.setState({\n                error: true\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"UserView\">\n                <UserMenu open={false}></UserMenu>\n                <UserRestaurantView user={this.state.user}></UserRestaurantView>\n            </div>\n        );\n    }\n}\n\nclass UserMenu extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {\n            open: props.open\n        };\n    }\n\n    render() {\n        return <div className=\"UserMenu\"></div>\n    }\n}\n\nexport default UserView;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport UserView from \"./User/UserView\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <div className=\"App-body\">\n          <UserView></UserView>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}